version: 2.1

orbs:
  heroku: circleci/heroku@1.2.6

jobs:
  build-front:
    docker:
      - image: cimg/node:20.0
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Debug - List repository contents
          command: |
            echo "Current directory: $(pwd)"
            echo "Root directory contents:"
            ls -la
            echo "Recursive listing of all directories:"
            find . -type d
            echo "Contents of front directory:"
            ls -la front
            echo "Contents of front/app directory:"
            ls -la front/app
      - run:
          name: Debug - Check package-lock.json
          command: |
            if [ -f front/app/package-lock.json ]; then
              echo "package-lock.json exists"
              echo "First few lines of package-lock.json:"
              head -n 10 front/app/package-lock.json
            else
              echo "package-lock.json does not exist"
              echo "Contents of front/app:"
              ls -la front/app
            fi
      - restore_cache:
          keys:
            - v1-front-dependencies-{{ checksum "front/app/package-lock.json" }}
            - v1-front-dependencies-
      - run:
          name: Install Dependencies
          command: |
            cd front/app
            npm ci || npm install
      - save_cache:
          paths:
            - front/app/node_modules
          key: v1-front-dependencies-{{ checksum "front/app/package-lock.json" }}
      - run:
          name: Run linter
          command: |
            cd front/app
            npm run lint
      - run:
          name: Build application
          command: |
            cd front/app
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - front/app/dist
            - front/app/package.json
            - front/app/package-lock.json

  deploy-front:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - attach_workspace:
          at: ~/repo
      - heroku/install
      - run:
          name: Deploy to Heroku
          command: |
            cd ~/repo/front
            heroku container:login
            heroku container:push web -a $HEROKU_FRONT_APP_NAME
            heroku container:release web -a $HEROKU_FRONT_APP_NAME
      - run:
          name: Set Heroku config
          command: |
            heroku config:set NODE_ENV=production -a $HEROKU_FRONT_APP_NAME
            heroku config:set VITE_API_URL=$PROD_API_URL -a $HEROKU_FRONT_APP_NAME

  # APIç”¨
  # build-api:
  #   docker:
  #     - image: cimg/ruby:3.1
  #   working_directory: ~/repo/api
  #   steps:
  #     - checkout:
  #         path: ~/repo
  #     - run:
  #         name: Install dependencies
  #         command: bundle install
  #     - run:
  #         name: Run tests
  #         command: bundle exec rspec
  #     - run:
  #         name: Build Docker image
  #         command: |
  #           docker build -t app-api -f Dockerfile.dev .
  #     - persist_to_workspace:
  #         root: ~/repo/api
  #         paths:
  #           - .

  # deploy-api:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout:
  #         path: ~/repo
  #     - setup_remote_docker:
  #         version: 20.10.14
  #     - attach_workspace:
  #         at: ~/repo/api
  #     - heroku/install
  #     - run:
  #         name: Deploy to Heroku
  #         command: |
  #           cd ~/repo/api
  #           heroku container:login
  #           heroku container:push web -a $HEROKU_API_APP_NAME
  #           heroku container:release web -a $HEROKU_API_APP_NAME
  #     - run:
  #         name: Set Heroku config
  #         command: |
  #           heroku config:set RAILS_ENV=production -a $HEROKU_API_APP_NAME
  #           heroku config:set DATABASE_URL=$DATABASE_URL -a $HEROKU_API_APP_NAME

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-front
      - deploy-front:
          requires:
            - build-front
          filters:
            branches:
              only: main
      # - build-api
      # - deploy-api:
      #     requires:
      #       - build-api
      #     filters:
      #       branches:
      #         only: main